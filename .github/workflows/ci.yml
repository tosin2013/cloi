name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  # Detect changes to optimize job execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      javascript: ${{ steps.filter.outputs.javascript }}
      python: ${{ steps.filter.outputs.python }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            javascript:
              - '**/*.js'
              - '**/*.cjs'
              - '**/*.mjs'
              - 'package*.json'
            python:
              - '**/*.py'
              - '**/requirements.txt'
            docs:
              - '**/*.md'
              - 'LICENSE'

  # Code quality checks for JavaScript
  lint-javascript:
    name: Lint JavaScript
    needs: changes
    if: ${{ needs.changes.outputs.javascript == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Upgrade npm
        run: npm install -g npm@10.0.0

      - name: Install dependencies
        run: |
          rm -f package-lock.json
          npm install --package-lock-only
          npm ci --ignore-scripts
          npm run postinstall:ci
      
      - name: Run ESLint
        run: npx eslint . --ext .js,.cjs,.mjs --max-warnings 10 || true
      
      - name: Check formatting with Prettier
        run: npx prettier --check "**/*.{js,cjs,mjs,json,md}" || true

  # Python code quality checks
  lint-python:
    name: Lint Python
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
      
      - name: Run Black formatter check
        run: black --check bin/ || true
      
      - name: Run isort check
        run: isort --check-only bin/ || true
      
      - name: Run flake8
        run: flake8 bin/ --max-line-length=88 --extend-ignore=E203 || true

  # Basic functionality tests
  test-setup:
    name: Test Setup Process
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22, 24]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Upgrade npm
        run: npm install -g npm@10.0.0

      - name: Install dependencies
        run: |
          rm -f package-lock.json
          npm install --package-lock-only
          npm ci --ignore-scripts
          npm run postinstall:ci
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt
      
      - name: Test module loading
        run: npm run test-rag
      
      - name: Test enhanced modular system
        run: npm run test:enhanced
      
      - name: Test CLI help command
        run: node src/cli/unified.js --help
      
      - name: Test CLI status
        run: node src/cli/unified.js status || true
      
      - name: Test setup script exists
        run: |
          test -f bin/cloi-setup.cjs
          test -f bin/ollama-setup.cjs

  # Integration test for CodeBERT service
  test-codebert:
    name: Test CodeBERT Service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Upgrade npm
        run: npm install -g npm@10.0.0

      - name: Install dependencies
        run: |
          rm -f package-lock.json
          npm install --package-lock-only
          npm ci --ignore-scripts
          npm run postinstall:ci
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt
      
      - name: Start CodeBERT service
        run: |
          npm run start-codebert &
          sleep 30  # Give service time to start
      
      - name: Test CodeBERT endpoint
        run: |
          curl -f http://localhost:5001/health || echo "Health check endpoint not available"
          
      - name: Stop CodeBERT service
        run: npm run stop-codebert || true
        if: always()

  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=high || true
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Check Python dependencies
        run: |
          pip install safety
          safety check -r bin/requirements.txt || true

  # Documentation validation
  validate-docs:
    name: Validate Documentation
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: '.github/markdown-link-check.json'
          check-modified-files-only: 'yes'
        continue-on-error: true
      
      - name: Spell check
        uses: streetsidesoftware/cspell-action@v5
        with:
          files: "**/*.md"
        continue-on-error: true

  # Summary job to ensure all checks pass
  ci-summary:
    name: CI Summary
    needs: [lint-javascript, lint-python, test-setup, test-codebert, dependency-check, validate-docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check job results
        run: |
          echo "JavaScript Lint: ${{ needs.lint-javascript.result }}"
          echo "Python Lint: ${{ needs.lint-python.result }}"
          echo "Setup Tests: ${{ needs.test-setup.result }}"
          echo "CodeBERT Tests: ${{ needs.test-codebert.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Documentation: ${{ needs.validate-docs.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.test-setup.result }}" == "failure" ]] || \
             [[ "${{ needs.test-codebert.result }}" == "failure" ]]; then
            echo "Required tests failed!"
            exit 1
          fi