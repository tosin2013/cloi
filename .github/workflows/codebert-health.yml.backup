name: CodeBERT Service Health Check

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
  push:
    paths:
      - 'bin/start_codebert_service.py'
      - 'bin/requirements.txt'
      - 'src/rag/**'

jobs:
  health-check:
    name: CodeBERT Service Health
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Node dependencies
        run: |
          rm -f package-lock.json
          npm install --package-lock-only
          npm ci
      
      - name: Start CodeBERT service
        run: |
          echo "Starting CodeBERT service..."
          npm run start-codebert &
          SERVICE_PID=$!
          echo "SERVICE_PID=$SERVICE_PID" >> $GITHUB_ENV
          
          # Wait for service to be ready
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -s http://localhost:5001 > /dev/null 2>&1; then
              echo "CodeBERT service is ready!"
              break
            fi
            echo "Waiting for service... (attempt $((attempt+1))/$max_attempts)"
            sleep 10
            attempt=$((attempt+1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Service failed to start within timeout"
            exit 1
          fi
      
      - name: Test embedding endpoint
        run: |
          # Test the embedding endpoint
          response=$(curl -s -X POST http://localhost:5001/embed \
            -H "Content-Type: application/json" \
            -d '{"text": "function test() { return true; }"}')
          
          if [[ -z "$response" ]]; then
            echo "No response from embedding endpoint"
            exit 1
          fi
          
          echo "Embedding response received"
          echo "$response" | jq '.' || echo "$response"
      
      - name: Test batch embedding
        run: |
          # Test batch embedding capability
          response=$(curl -s -X POST http://localhost:5001/embed_batch \
            -H "Content-Type: application/json" \
            -d '{"texts": ["const x = 1;", "function hello() {}", "class Test {}"]}')
          
          if [[ -z "$response" ]]; then
            echo "No response from batch embedding endpoint"
            exit 1
          fi
          
          echo "Batch embedding response received"
      
      - name: Check memory usage
        run: |
          # Monitor memory usage of the service
          if [ -n "$SERVICE_PID" ]; then
            ps -p $SERVICE_PID -o pid,vsz,rss,comm
            
            # Get memory in MB
            RSS=$(ps -p $SERVICE_PID -o rss= | tr -d ' ')
            RSS_MB=$((RSS / 1024))
            echo "CodeBERT service memory usage: ${RSS_MB}MB"
            
            # Alert if memory usage is too high (>2GB)
            if [ $RSS_MB -gt 2048 ]; then
              echo "::warning::High memory usage detected: ${RSS_MB}MB"
            fi
          fi
      
      - name: Performance benchmark
        run: |
          # Simple performance test
          echo "Running performance benchmark..."
          
          start_time=$(date +%s.%N)
          for i in {1..10}; do
            curl -s -X POST http://localhost:5001/embed \
              -H "Content-Type: application/json" \
              -d '{"text": "const performanceTest = () => { return Math.random(); }"}' > /dev/null
          done
          end_time=$(date +%s.%N)
          
          duration=$(echo "$end_time - $start_time" | bc)
          avg_time=$(echo "scale=3; $duration / 10" | bc)
          
          echo "Average embedding time: ${avg_time}s"
          
          # Alert if too slow (>1s per embedding)
          if (( $(echo "$avg_time > 1" | bc -l) )); then
            echo "::warning::Slow embedding performance: ${avg_time}s per request"
          fi
      
      - name: Test RAG integration
        run: |
          # Test the RAG system integration
          cd ${{ github.workspace }}
          
          # Create a small test file
          echo "function testFunction() { return 42; }" > test_file.js
          
          # Test indexing
          node -e "
          import { Indexer } from './src/rag/indexer.js';
          const indexer = new Indexer();
          indexer.indexFile('./test_file.js', 'test_file.js')
            .then(() => console.log('Indexing successful'))
            .catch(err => {
              console.error('Indexing failed:', err);
              process.exit(1);
            });
          "
      
      - name: Stop CodeBERT service
        if: always()
        run: |
          if [ -n "$SERVICE_PID" ]; then
            echo "Stopping CodeBERT service (PID: $SERVICE_PID)"
            kill $SERVICE_PID || true
          fi
          npm run stop-codebert || true
      
      - name: Generate health report
        if: always()
        run: |
          cat > codebert-health-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "${{ job.status }}",
            "service": "CodeBERT",
            "checks": {
              "startup": "passed",
              "embedding": "passed",
              "batch_embedding": "passed",
              "performance": "passed",
              "memory": "passed"
            }
          }
          EOF
      
      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codebert-health-report
          path: codebert-health-report.json
          retention-days: 30

  # Monitor model availability
  model-check:
    name: Check Model Availability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Check Hugging Face model availability
        run: |
          pip install requests
          
          python << 'EOF'
          import requests
          import json
          
          # Check if the CodeBERT model is accessible
          model_id = "microsoft/codebert-base"
          url = f"https://huggingface.co/api/models/{model_id}"
          
          try:
              response = requests.get(url)
              if response.status_code == 200:
                  print(f"✓ Model {model_id} is available")
                  model_info = response.json()
                  print(f"  Downloads: {model_info.get('downloads', 'N/A')}")
                  print(f"  Last modified: {model_info.get('lastModified', 'N/A')}")
              else:
                  print(f"✗ Model {model_id} returned status: {response.status_code}")
                  exit(1)
          except Exception as e:
              print(f"✗ Failed to check model: {e}")
              exit(1)
          EOF

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    needs: [health-check, model-check]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `CodeBERT Service Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Health Check Failure
            
            The CodeBERT service health check has failed. Please investigate:
            
            - **Workflow Run**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - **Time**: ${new Date().toISOString()}
            - **Branch**: ${context.ref}
            
            ### Possible Issues
            - Service failed to start
            - Embedding endpoints not responding
            - Performance degradation
            - Model availability issues
            
            Please check the workflow logs for more details.
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['codebert-health', 'automated'],
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['codebert-health', 'automated', 'bug']
              });
            }