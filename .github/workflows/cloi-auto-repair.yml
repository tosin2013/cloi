name: Cloi Auto-Repair E2E Testing
on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'adr-core'
        type: choice
        options:
          - adr-core
          - full
          - syntax-errors
          - dependency-issues
          - build-failures
          - workflow-issues
          - adr-compliance
      create_fixes:
        description: 'Create actual fixes (vs dry-run)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and install CLOI first - fail fast if build issues
  build-cloi:
    name: Build & Install CLOI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Add missing dependencies
        run: |
          echo "🔧 Adding missing glob dependency..."
          npm install glob@^10.3.10 --save
          echo "📦 Dependencies added successfully"
      
      - name: Install dependencies
        run: |
          echo "📦 Installing CLOI dependencies..."
          npm ci
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt
      
      - name: Build and link CLOI globally  
        run: |
          echo "🔨 Linking CLOI globally..."
          npm link
          
          # Verify CLOI binary is available
          echo "✅ Testing CLOI binary availability..."
          cloi --version || (echo "❌ CLOI binary not available" && exit 1)
          
          echo "✅ CLOI linked successfully"
      
      - name: Test core ADR functionality
        run: |
          echo "🧪 Testing core ADR functionality..."
          
          # Test basic command structure
          echo "📋 Testing ADR command structure..."
          cloi adr --help || (echo "❌ ADR commands not available" && exit 1)
          
          # Test validation script directly
          echo "📋 Testing validation script..."
          node scripts/validate-adr-compliance.js --help || (echo "❌ Validation script failed" && exit 1)
          
          # Test ADR validation through CLI
          echo "📋 Testing ADR validation through CLI..."
          cloi adr validate --help || (echo "❌ ADR validate command failed" && exit 1)
          
          echo "✅ Core ADR functionality verified"

  # Create focused test scenarios - ADR first
  create-test-scenarios:
    name: Create Test Scenarios
    needs: build-cloi
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.scenarios.outputs.list }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate test scenarios
        id: scenarios
        run: |
          # Focus on ADR core functionality first
          SCENARIO="${{ github.event.inputs.test_scenario || 'adr-core' }}"
          
          case $SCENARIO in
            "adr-core")
              # Focus on core ADR functionality only
              SCENARIOS='["adr-validation", "adr-compliance-check"]'
              ;;
            "adr-compliance")
              SCENARIOS='["adr-validation", "adr-auto-repair", "adr-enforcement"]'
              ;;
            "syntax-errors")
              SCENARIOS='["syntax-error-js", "syntax-error-py"]'
              ;;
            "dependency-issues")
              SCENARIOS='["missing-dependency"]'
              ;;
            "build-failures")
              SCENARIOS='["build-script-fail"]'
              ;;
            "workflow-issues")
              SCENARIOS='["deprecated-actions"]'
              ;;
            *)
              # Full test suite - only after ADR core is working
              SCENARIOS='["adr-validation", "adr-compliance-check", "syntax-error-js", "missing-dependency"]'
              ;;
          esac
          
          echo "list=$SCENARIOS" >> $GITHUB_OUTPUT
          echo "Testing scenarios: $SCENARIOS"

  # Test each scenario with built CLOI binary
  test-auto-repair:
    name: Test Auto-Repair (${{ matrix.scenario }})
    needs: [build-cloi, create-test-scenarios]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: ${{ fromJson(needs.create-test-scenarios.outputs.scenarios) }}
      fail-fast: true  # Fail fast to focus on issues
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Add missing dependencies
        run: |
          echo "🔧 Adding missing glob dependency..."
          npm install glob@^10.3.10 --save
          echo "📦 Dependencies added successfully"
      
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm ci
          python -m pip install --upgrade pip
          pip install -r bin/requirements.txt
      
      - name: Link CLOI globally
        run: |
          echo "🔨 Linking CLOI globally..."
          npm link
          cloi --version || (echo "❌ CLOI linking failed" && exit 1)
      
      - name: Create test scenario - ${{ matrix.scenario }}
        id: create-scenario
        run: |
          echo "Creating test scenario: ${{ matrix.scenario }}"
          mkdir -p test-scenarios/${{ matrix.scenario }}
          
          case "${{ matrix.scenario }}" in
            "adr-validation")
              echo "Testing basic ADR validation..."
              echo "error-command=cloi adr validate" >> $GITHUB_OUTPUT
              ;;
              
            "adr-compliance-check")
              echo "Testing ADR compliance checking..."
              echo "error-command=node scripts/validate-adr-compliance.js" >> $GITHUB_OUTPUT
              ;;
              
            "adr-auto-repair")
              # Create a test violation for ADR compliance
              mkdir -p test-scenarios/${{ matrix.scenario }}/src/cli/test-module
              cat > test-scenarios/${{ matrix.scenario }}/src/cli/test-module/unified.js << 'EOF'
          // This should be index.js according to ADR-003
          export default {
            test: true
          };
          EOF
              echo "error-command=node scripts/validate-adr-compliance.js --fix" >> $GITHUB_OUTPUT
              ;;
              
            "adr-enforcement")
              # Create import violation
              cat > test-scenarios/${{ matrix.scenario }}/test-import.js << 'EOF'
          import something from './unified.js';
          console.log(something);
          EOF
              echo "error-command=node scripts/validate-adr-compliance.js" >> $GITHUB_OUTPUT
              ;;
              
            "syntax-error-js")
              cat > test-scenarios/${{ matrix.scenario }}/broken.js << 'EOF'
          // Intentional syntax error for testing
          function testFunction() {
              console.log("Testing")
              // Missing closing brace and semicolon
          // Invalid syntax below
          const x = { invalid syntax here
          EOF
              echo "error-command=node test-scenarios/${{ matrix.scenario }}/broken.js" >> $GITHUB_OUTPUT
              ;;
              
            "missing-dependency")
              cat > test-scenarios/${{ matrix.scenario }}/missing-dep.js << 'EOF'
          // Test missing dependency
          import { nonExistentPackage } from 'package-that-does-not-exist';
          console.log(nonExistentPackage);
          EOF
              echo "error-command=node test-scenarios/${{ matrix.scenario }}/missing-dep.js" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Execute scenario and capture error
        id: run-scenario
        continue-on-error: true
        run: |
          echo "Executing: ${{ steps.create-scenario.outputs.error-command }}"
          
          # Run the command and capture output - NO || true to see real errors
          ${{ steps.create-scenario.outputs.error-command }} 2>&1 | tee error-output.txt
          EXIT_CODE=$?
          
          # Save error for analysis
          ERROR_OUTPUT=$(cat error-output.txt)
          echo "error-output<<EOF" >> $GITHUB_OUTPUT
          echo "$ERROR_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
      
      - name: Test CLOI auto-repair on scenario
        id: auto-repair
        run: |
          echo "🔧 Testing CLOI auto-repair on ${{ matrix.scenario }}..."
          
          CREATE_FIXES="${{ github.event.inputs.create_fixes || 'false' }}"
          
          case "${{ matrix.scenario }}" in
            "adr-validation")
              # Test ADR validation using CLOI binary
              echo "Testing ADR validation with CLOI binary..."
              timeout 120s cloi adr validate --verbose
              ;;
              
            "adr-compliance-check")
              # Test validation script directly
              echo "Testing validation script..."
              timeout 120s node scripts/validate-adr-compliance.js --json
              ;;
              
            "adr-auto-repair")
              # Test auto-repair functionality
              echo "Testing ADR auto-repair..."
              timeout 120s node scripts/validate-adr-compliance.js --fix --verbose
              ;;
              
            "adr-enforcement")
              # Test enforcement detection
              echo "Testing ADR enforcement..."
              timeout 120s node scripts/validate-adr-compliance.js --json
              ;;
              
            "syntax-error-js"|"missing-dependency")
              # Test error analysis using CLOI binary
              echo "Testing error analysis with CLOI binary..."
              timeout 120s cloi analyze "${{ steps.run-scenario.outputs.error-output }}" \
                --files "test-scenarios/${{ matrix.scenario }}/" \
                --context '{"scenario": "${{ matrix.scenario }}", "test": true}'
              ;;
          esac
          
          echo "Auto-repair test completed for ${{ matrix.scenario }}"
      
      - name: Verify auto-repair effectiveness
        id: verify
        run: |
          echo "🔍 Verifying auto-repair effectiveness for ${{ matrix.scenario }}..."
          
          case "${{ matrix.scenario }}" in
            "adr-validation")
              # Check if ADR validation ran successfully
              if cloi adr validate --json 2>/dev/null | jq -e '.success == true' >/dev/null 2>&1; then
                echo "result=validation-success" >> $GITHUB_OUTPUT
              else
                echo "result=validation-needs-work" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "adr-compliance-check")
              # Check if compliance script ran without crashing
              if node scripts/validate-adr-compliance.js --json >/dev/null 2>&1; then
                echo "result=compliance-script-works" >> $GITHUB_OUTPUT
              else
                echo "result=compliance-script-broken" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "adr-auto-repair")
              # Check if the unified.js was renamed to index.js
              if [ -f "test-scenarios/${{ matrix.scenario }}/src/cli/test-module/index.js" ] && \
                 [ ! -f "test-scenarios/${{ matrix.scenario }}/src/cli/test-module/unified.js" ]; then
                echo "result=fixed" >> $GITHUB_OUTPUT
              else
                echo "result=not-fixed" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "adr-enforcement")
              # Check if import violations were detected
              if node scripts/validate-adr-compliance.js --json 2>&1 | grep -q "unified.js"; then
                echo "result=violations-detected" >> $GITHUB_OUTPUT
              else
                echo "result=no-violations" >> $GITHUB_OUTPUT
              fi
              ;;
              
            *)
              # For other scenarios, check if CLOI provided analysis
              if [ -f ".cloi/analysis/latest.json" ]; then
                echo "result=analysis-provided" >> $GITHUB_OUTPUT
              else
                echo "result=no-analysis" >> $GITHUB_OUTPUT
              fi
              ;;
          esac
      
      - name: Upload scenario results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scenario-${{ matrix.scenario }}-results
          path: |
            test-scenarios/${{ matrix.scenario }}/
            error-output.txt
            .cloi/
          retention-days: 7

  # Summary and reporting
  auto-repair-summary:
    name: Auto-Repair E2E Summary
    needs: [create-test-scenarios, test-auto-repair]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate summary report
        run: |
          echo "## 🤖 CLOI Auto-Repair E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build & Test Strategy:** Build-first, fail-fast with CLOI binary" >> $GITHUB_STEP_SUMMARY
          echo "**Focus:** ADR functionality validation and core capabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scenarios Executed:**" >> $GITHUB_STEP_SUMMARY
          
          SCENARIOS='${{ needs.create-test-scenarios.outputs.scenarios }}'
          echo "$SCENARIOS" | jq -r '.[]' | while read scenario; do
            echo "- $scenario" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Results:**" >> $GITHUB_STEP_SUMMARY
          echo "| Scenario | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          echo "| All Scenarios | ${{ needs.test-auto-repair.result }} | Build-first E2E testing |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.test-auto-repair.result }}" == "success" ]]; then
            echo "🎉 **ADR functionality validated successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ CLOI binary builds and installs correctly" >> $GITHUB_STEP_SUMMARY
            echo "✅ ADR validation system operational" >> $GITHUB_STEP_SUMMARY
            echo "✅ Core auto-repair capabilities working" >> $GITHUB_STEP_SUMMARY
            echo "✅ Ready for expanded testing scenarios" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **ADR functionality needs attention**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Focus on core ADR functionality first" >> $GITHUB_STEP_SUMMARY
            echo "📋 Review build and dependency issues" >> $GITHUB_STEP_SUMMARY
            echo "🧪 Validate basic CLOI binary functionality" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        run: |
          RESULT="${{ needs.test-auto-repair.result }}"
          
          if [[ "$RESULT" == "success" ]]; then
            EMOJI="🤖✅"
            TITLE="CLOI ADR Functionality Validated"
            MESSAGE="Core ADR functionality is working! CLOI binary builds successfully and ADR validation system is operational."
          else
            EMOJI="🤖🔧"
            TITLE="CLOI ADR Functionality Needs Work"
            MESSAGE="ADR functionality needs attention. Focus on core build and validation issues first."
          fi
          
          gh pr comment ${{ github.event.number }} --body "${EMOJI} **${TITLE}**
          
          ${MESSAGE}
          
          **Build-First Strategy Results:**
          - CLOI Binary Build: ${{ needs.build-cloi.result }}
          - ADR Core Testing: ${{ needs.test-auto-repair.result }}
          
          **Focus Areas:**
          - ✅ Build and install CLOI binary first
          - 🔧 Validate ADR functionality thoroughly  
          - 📋 Fail fast on core issues
          - 🎯 Expand testing after ADR core is solid
          
          **View Results:** [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          This build-first approach ensures we test the real user experience."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
