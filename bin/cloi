#!/usr/bin/env node
/**
 * Main Cloi CLI Entry Point
 * 
 * Routes between legacy and enhanced CLI based on command
 */

import { execSync } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Get command from arguments
const args = process.argv.slice(2);
const command = args[0];

// Enhanced CLI commands
const enhancedCommands = [
  'plugins',
  'analyze',
  'fix',
  'config',
  'session',
  'status',
  'new',
  'doctor',
  'tools',
  'a2a',
  'enhance'
];

// Check if using enhanced command
const isEnhancedCommand = command && enhancedCommands.includes(command);

// Route to appropriate CLI
if (isEnhancedCommand) {
  // Use enhanced modular CLI
  const enhancedCLI = path.join(__dirname, '../src/cli/modular.js');
  
  try {
    execSync(`node ${enhancedCLI} ${args.join(' ')}`, {
      stdio: 'inherit',
      env: process.env
    });
  } catch (error) {
    // Exit with same code as child process
    process.exit(error.status || 1);
  }
} else {
  // Use legacy CLI for backward compatibility
  const legacyCLI = path.join(__dirname, 'index.js');
  
  try {
    execSync(`node ${legacyCLI} ${args.join(' ')}`, {
      stdio: 'inherit',
      env: process.env
    });
  } catch (error) {
    // Exit with same code as child process
    process.exit(error.status || 1);
  }
}